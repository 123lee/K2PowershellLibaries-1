<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"  >
  <UsingTask TaskName="SourceCode.DeploymentTasks.Compiler.WorkflowCompiler" AssemblyName="SourceCode.DeploymentTasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=16a2c5aaaa1b130d" />
  <UsingTask TaskName="CreateCSharpManifestResourceName" AssemblyName="Microsoft.Build.Tasks, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>

  <!--Import the standards targets-->
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

  <!--  *****************************************************************************  -->
  <!--  ***          K2.net Targets                                                **  -->
  <!--  *****************************************************************************  -->
  <PropertyGroup>
    <NoWarn Condition="'$(NoWarn)'!=''">$(NoWarn),</NoWarn>
    <NoWarn>$(NoWarn)MSB4056</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildExtensionsPath)\SourceCode\v1.0\ProjectSystem.Targets</MSBuildAllProjects>
    <BuiltProjectOutputGroupDependsOn>$(BuiltProjectOutputGroupDependsOn);ProjectCompilation</BuiltProjectOutputGroupDependsOn>
    <!--<AssembliesBuiltByChildProjects></AssembliesBuiltByChildProjects>-->
    <!--<CoreCleanDependsOn>$(CoreCleanDependsOn);CleanSubProjects</CoreCleanDependsOn>-->
    <CoreCompileDependsOn>$(CoreCompileDependsOn);ProjectCompilation</CoreCompileDependsOn>
    <!--<CompileSubProjectsDependsOn>$(CompileSubProjectsDependsOn);ProjectCompilation</CompileSubProjectsDependsOn>-->
    <RequestedTargetName></RequestedTargetName>
  </PropertyGroup>

  <Target Name="ProjectCompilation">
    <WorkflowCompiler
             OutputAssembly="@(IntermediateAssembly)"
             RequestedTargetName="$(RequestedTargetName)">
    </WorkflowCompiler>
  </Target>

   

  <Target
	  Name="CoreCompile"
	  Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(ManifestResourceWithNoCulture);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ManifestNonResxWithNoCultureOnDisk);
                @(ReferencePath);
                @(CompiledLicenseFile)"
	  Outputs="$(DocFile);
                 @(IntermediateAssembly);
                 $(NonExistentFile)"
		  DependsOnTargets="$(CoreCompileDependsOn)"
    >
  </Target>
 

  <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.

        [IN]
        @(ResxWithNoCulture) - The names the non-culture .RESX files.
        @(ResxWithCulture) - The names the culture .RESX files.
        @(NonResxWithNoCulture) - The names of the non-culture non-RESX files (like bitmaps, etc).
        @(NonResxWithCulture) - The names of the culture non-RESX files (like bitmaps, etc).

        [OUT]
        @(ManifestResourceWithNoCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestResourceWithCultureName) - The corresponding manifest resource name (.RESOURCE)
        @(ManifestNonResxWithNoCulture) - The corresponding manifest resource name.
        @(ManifestNonResxWithCulture) - The corresponding manifest resource name.

    For IronPython applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->
  <PropertyGroup>
    <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
  </PropertyGroup>
  <Target
    Name="CreateManifestResourceNames"
    Condition="'@(ResxWithNoCulture)@(ResxWithCulture)@(NonResxWithNoCulture)@(NonResxWithCulture)'!=''"
    DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

    <!-- Create the target resource names for non-culture resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(ResxWithNoCulture)'!=''"
        ResourceFiles="@(ResxWithNoCulture)"
        RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithNoCultureName"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for culture resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(ResxWithCulture)'!=''"
        ResourceFiles="@(ResxWithCulture)"
        RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithCultureName"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for non-culture non-resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(NonResxWithNoCulture)'!=''"
        ResourceFiles="@(NonResxWithNoCulture)"
        RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithNoCulture"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for culture non-resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(NonResxWithCulture)'!=''"
        ResourceFiles="@(NonResxWithCulture)"
        RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithCulture"/>

    </CreateCSharpManifestResourceName>
  </Target>




</Project>